{"name":"cnc.js","tagline":"CNC.js is a web-based CNC milling controller for the Arduino running GRBL.","body":"# CNC.js [![build status](https://travis-ci.org/cheton/cnc.js.svg?branch=master)](https://travis-ci.org/cheton/cnc.js) [![Coverage Status](https://coveralls.io/repos/cheton/cnc.js/badge.svg)](https://coveralls.io/r/cheton/cnc.js)\r\n[![NPM](https://nodei.co/npm/cncjs.png?downloads=true&stars=true)](https://nodei.co/npm/cncjs/)   \r\n![cncjs](https://raw.githubusercontent.com/cheton/cnc.js/master/media/banner.png)\r\n\r\nCNC.js is a web-based CNC milling controller for the [Arduino](https://www.arduino.cc/) running [Grbl](https://github.com/grbl/grbl). It runs on an [Raspberry Pi](https://www.raspberrypi.org/) or a laptop computer that you have Node.js installed, connecting to the Arduino over a serial connection using a USB serial port, a Bluetooth serial module, or a  Serial-to-WiFi module like [XBee](https://www.arduino.cc/en/Guide/ArduinoWirelessShieldS2) or [USR-WIFI232-T](https://gist.github.com/ajfisher/1fdbcbbf96b7f2ba73cd).\r\n\r\n![cnc.js](https://raw.githubusercontent.com/cheton/cnc.js/master/media/preview.gif) \r\n\r\n## Installation\r\n```bash\r\n$ npm install -g cncjs\r\n```\r\n\r\n## Usage\r\nRun `cnc` to start the server, and visit `http://yourhostname:8000/` to view the web console:\r\n```bash\r\n$ cnc\r\n```\r\n\r\nRun `cnc` with -h for detailed usage:\r\n```bash\r\n$ cnc -h\r\n\r\n  Usage: cnc [options]\r\n  \r\n  Options:\r\n\r\n    -h, --help               output usage information\r\n    -V, --version            output the version number\r\n    -p, --port               set listen port (default: 8000)\r\n    -l, --host               set listen address or hostname (default: 0.0.0.0)\r\n    -b, --backlog            set listen backlog (default: 511)\r\n    -c, --config <filename>  set configuration file\r\n```\r\n\r\n## Examples\r\nThere are several *.gcode files in the [examples](https://github.com/cheton/cnc.js/tree/master/examples) directory. You can use the GCode widget to load a GCode file and make a trial run.\r\n\r\nIf you don't have a CAM software, try using [jscut](http://jscut.org/) to create G-Code from *.svg. It's a simple CAM package that runs in the browser.\r\n\r\nCheck out a live demo at http://jscut.org/jscut.html.\r\n\r\n## User Guide\r\n\r\n### Prerequisite\r\nYou will need an Arduino UNO/Nano board based on the ATmega328P. Download the latest Grbl firmware from the [Grbl  repository](https://github.com/grbl/grbl), and [flash Grbl to an Arduino](https://github.com/grbl/grbl/wiki/Flashing-Grbl-to-an-Arduino).\r\n\r\n#### Running without using Arduino board\r\nIf you don't have an Arduino, check out [grbl-sim](https://github.com/grbl/grbl-sim) to compile Grbl into an executable for your computer.\r\n\r\n1. Clone this repository into the directory containing the Grbl source code (i.e. `<repo>/grbl/`), like so:\r\n\r\n  ```bash\r\n  $ git clone git@github.com:grbl/grbl.git\r\n  $ cd grbl/grbl\r\n  $ git clone git@github.com:grbl/grbl-sim.git\r\n  $ cd grbl-sim\r\n  ```\r\n2. Edit the Grbl-sim Makefile to select the correct `PLATFORM =` line.\r\n3. Run `make new` to compile the Grbl sim. It will create an executable file named `grbl_sim.exe`. See below:\r\n\r\n  ![grbl-sim](https://raw.githubusercontent.com/cheton/cnc.js/master/media/grbl-sim.png).\r\n4. On Linux, run the updated version of [simport.sh](https://github.com/cheton/cnc.js/blob/master/examples/grbl-sim/simport.sh) (`examples/grbl-sim/simport.sh`) to create a fake serial port (`/dev/ttyFAKE`), and use it to test your Grbl interface software.\r\n5. Copy [config.js](https://github.com/cheton/cnc.js/blob/master/examples/grbl-sim/config.js) from [examples/grbl-sim](https://github.com/cheton/cnc.js/tree/master/examples/grbl-sim) to your local folder, and run `cnc -c /path/to/your/config.js` to start the server. The configuration file should look like below:\r\n\r\n  ```js\r\n  module.exports = {\r\n      ports: [\r\n          {\r\n              comName: '/dev/ttyFAKE',\r\n              manufacturer: 'grbl-sim' // optional\r\n          }\r\n      ]\r\n  };\r\n  ```\r\n6. Open `/dev/ttyFAKE` from the Connection widget to interact with the Grbl simulator as if connected to an Arduino with Grbl.\r\n\r\n  ![ttyFAKE](https://raw.githubusercontent.com/cheton/cnc.js/master/media/ttyFAKE.png)\r\n\r\n### Display Language\r\nYou can change the display language from the <b>Settings</b> menu, it will set the `lang` query string parameter: `?lang={locale}`\r\n\r\nHere is a list of currently supported locales:\r\n\r\nLocale | Language\r\n------ | --------\r\nde     | Deutsch\r\nen     | English (US)\r\nes     | Español\r\nfr     | Français\r\nit     | Italiano\r\nja     | 日本語\r\nzh-cn  | 中文 (简体)\r\nzh-tw  | 中文 (繁體)\r\n\r\nWe greatly appreciate your contributions for translation. Update resource strings in `web/i18n/{lang}/resource.json` and submit your pull request (PR) to make translation better.\r\n\r\n### Widgets\r\nTBD\r\n\r\n## License\r\n\r\nCopyright (c) 2015 Cheton Wu\r\n\r\nLicensed under the [MIT License](LICENSE).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}